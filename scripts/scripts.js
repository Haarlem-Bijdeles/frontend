'use strict';

(function () {

  if (!document.querySelector('.js-contact-form')) return;

  var form = document.querySelector('.js-contact-form');
  var commentArea = form.querySelector('.js-message');
  var nameInput = form.querySelector('.js-name');
  var messageElement = document.querySelector('#feedback');

  commentArea.addEventListener('invalid', function (e) {
    e.target.setCustomValidity('');
    if (!e.target.validity.valid) {
      e.target.setCustomValidity('Vul een bericht in.');
    }
  });

  commentArea.addEventListener('input', function (e) {
    e.target.setCustomValidity('');
  });

  function autosize() {
    var el = this;
    setTimeout(function () {
      el.style.cssText = 'height:auto;';
      el.style.cssText = 'height:' + (el.scrollHeight + 5) + 'px';
    }, 0);
  }

  commentArea.addEventListener('keydown', autosize);

  // send form data with JavaScript
  if (window.FormData) {
    form.addEventListener('submit', function (event) {
      var formData = new FormData(form);

      var commentValue = commentArea.value;
      var nameValue = nameInput.value;

      var xhr = new XMLHttpRequest();
      // save the comment in the database
      xhr.open('POST', site.ajaxurl, true);
      xhr.onload = function () {};

      xhr.onerror = function (error) {
        messageElement.className = 'message error';
        messageElement.textContent = 'There was an error posting the comment. Please try again.';
      };
      xhr.onprogress = function (evt) {
        messageElement.textContent = 'Uploading: ' + evt.loaded / evt.total * 100;
      };
      xhr.onloadend = function (evt) {
        messageElement.className = 'message success';
        messageElement.textContent = 'Your comment was posted sucessfully.';
      };

      xhr.send(formData);

      // always call preventDefault at the end, see: http://molily.de/javascript-failure/
      event.preventDefault();
    });
  };
})();

objectFit.polyfill({
  selector: '.hero__image', // this can be any CSS selector
  fittype: 'cover' // either contain, cover, fill or none
});

(function () {
  var button = document.querySelector('.menu__trigger');
  var menu = document.querySelector('.menu__list');
  var body = document.querySelector('body');

  button.addEventListener('click', function () {
    var expanded = undefined.getAttribute('aria-expanded') === 'true';
    undefined.setAttribute('aria-expanded', String(!expanded));
    menu.classList.toggle('is-active', !expanded);
    body.classList.toggle('is-active', !expanded);
  });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhY3QuanMiLCJmdW5jdGlvbnMuanMiLCJtZW51LmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZvcm0iLCJjb21tZW50QXJlYSIsIm5hbWVJbnB1dCIsIm1lc3NhZ2VFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJzZXRDdXN0b21WYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJhdXRvc2l6ZSIsImVsIiwic2V0VGltZW91dCIsInN0eWxlIiwiY3NzVGV4dCIsInNjcm9sbEhlaWdodCIsIndpbmRvdyIsIkZvcm1EYXRhIiwiZXZlbnQiLCJmb3JtRGF0YSIsImNvbW1lbnRWYWx1ZSIsInZhbHVlIiwibmFtZVZhbHVlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2l0ZSIsImFqYXh1cmwiLCJvbmxvYWQiLCJvbmVycm9yIiwiZXJyb3IiLCJjbGFzc05hbWUiLCJ0ZXh0Q29udGVudCIsIm9ucHJvZ3Jlc3MiLCJldnQiLCJsb2FkZWQiLCJ0b3RhbCIsIm9ubG9hZGVuZCIsInNlbmQiLCJwcmV2ZW50RGVmYXVsdCIsIm9iamVjdEZpdCIsInBvbHlmaWxsIiwic2VsZWN0b3IiLCJmaXR0eXBlIiwiYnV0dG9uIiwibWVudSIsImJvZHkiLCJleHBhbmRlZCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIlN0cmluZyIsImNsYXNzTGlzdCIsInRvZ2dsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxDQUFBLFlBQUE7O0FBRUEsTUFBQSxDQUFBQSxTQUFBQyxhQUFBLENBQUEsa0JBQUEsQ0FBQSxFQUFBOztBQUVBLE1BQUFDLE9BQUFGLFNBQUFDLGFBQUEsQ0FBQSxrQkFBQSxDQUFBO0FBQ0EsTUFBQUUsY0FBQUQsS0FBQUQsYUFBQSxDQUFBLGFBQUEsQ0FBQTtBQUNBLE1BQUFHLFlBQUFGLEtBQUFELGFBQUEsQ0FBQSxVQUFBLENBQUE7QUFDQSxNQUFBSSxpQkFBQUwsU0FBQUMs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anMiLCJzb3VyY2VzQ29udGVudCI6WyIoKCkgPT4ge1xuXG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNvbnRhY3QtZm9ybScpKSByZXR1cm47XG5cbiAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb250YWN0LWZvcm0nKTtcbiAgY29uc3QgY29tbWVudEFyZWEgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5qcy1tZXNzYWdlJyk7XG4gIGNvbnN0IG5hbWVJbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcignLmpzLW5hbWUnKTtcbiAgY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmVlZGJhY2snKTtcblxuICBjb21tZW50QXJlYS5hZGRFdmVudExpc3RlbmVyKCdpbnZhbGlkJywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4gICAgaWYgKCFlLnRhcmdldC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgZS50YXJnZXQuc2V0Q3VzdG9tVmFsaWRpdHkoJ1Z1bCBlZW4gYmVyaWNodCBpbi4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbW1lbnRBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGF1dG9zaXplKCl7XG4gICAgdmFyIGVsID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gJ2hlaWdodDphdXRvOyc7XG4gICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gJ2hlaWdodDonICsgKGVsLnNjcm9sbEhlaWdodCAgKyA1ICkgKyAncHgnO1xuICAgIH0sMCk7XG4gIH1cblxuICBjb21tZW50QXJlYS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYXV0b3NpemUpO1xuXG4gIC8vIHNlbmQgZm9ybSBkYXRhIHdpdGggSmF2YVNjcmlwdFxuICBpZiAod2luZG93LkZvcm1EYXRhKSB7XG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcbiAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcblxuICAgICAgY29uc3QgY29tbWVudFZhbHVlID0gY29tbWVudEFyZWEudmFsdWU7XG4gICAgICBjb25zdCBuYW1lVmFsdWUgPSBuYW1lSW5wdXQudmFsdWU7XG5cbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIC8vIHNhdmUgdGhlIGNvbW1lbnQgaW4gdGhlIGRhdGFiYXNlXG4gICAgICB4aHIub3BlbignUE9TVCcsIHNpdGUuYWpheHVybCwgdHJ1ZSk7XG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBtZXNzYWdlRWxlbWVudC5jbGFzc05hbWUgPSAnbWVzc2FnZSBlcnJvcic7XG4gICAgICAgIG1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gJ1RoZXJlIHdhcyBhbiBlcnJvciBwb3N0aW5nIHRoZSBjb21tZW50LiBQbGVhc2UgdHJ5IGFnYWluLic7XG4gICAgICB9O1xuICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIG1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gJ1VwbG9hZGluZzogJyArIGV2dC5sb2FkZWQgLyBldnQudG90YWwgKiAxMDA7XG4gICAgICB9O1xuICAgICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgbWVzc2FnZUVsZW1lbnQuY2xhc3NOYW1lID0gJ21lc3NhZ2Ugc3VjY2Vzcyc7XG4gICAgICAgIG1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gJ1lvdXIgY29tbWVudCB3YXMgcG9zdGVkIHN1Y2Vzc2Z1bGx5Lic7XG4gICAgICB9O1xuXG4gICAgICB4aHIuc2VuZChmb3JtRGF0YSk7XG5cbiAgICAgIC8vIGFsd2F5cyBjYWxsIHByZXZlbnREZWZhdWx0IGF0IHRoZSBlbmQsIHNlZTogaHR0cDovL21vbGlseS5kZS9qYXZhc2NyaXB0LWZhaWx1cmUvXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICB9O1xufSkoKTtcbiIsIm9iamVjdEZpdC5wb2x5ZmlsbCh7XG4gIHNlbGVjdG9yOiAnLmhlcm9fX2ltYWdlJywgLy8gdGhpcyBjYW4gYmUgYW55IENTUyBzZWxlY3RvclxuICBmaXR0eXBlOiAnY292ZXInLCAvLyBlaXRoZXIgY29udGFpbiwgY292ZXIsIGZpbGwgb3Igbm9uZVxufSk7XG4iLCIoKCkgPT4ge1xuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fdHJpZ2dlcicpO1xuICBjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX2xpc3QnKTtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpID09PSAndHJ1ZSc7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBTdHJpbmcoIWV4cGFuZGVkKSk7XG4gICAgbWVudS5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnLCAhZXhwYW5kZWQpO1xuICAgIGJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtYWN0aXZlJywgIWV4cGFuZGVkKTtcbiAgfSk7XG59KSgpO1xuXG4iXX0=
