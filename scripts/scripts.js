'use strict';

(function () {

  if (!document.querySelector('.js-contact-form')) return;

  var form = document.querySelector('.js-contact-form');
  var commentArea = form.querySelector('.js-message');
  var nameInput = form.querySelector('.js-name');
  var messageElement = document.querySelector('#feedback');

  commentArea.addEventListener('invalid', function (e) {
    e.target.setCustomValidity('');
    if (!e.target.validity.valid) {
      e.target.setCustomValidity('Vul een bericht in.');
    }
  });

  commentArea.addEventListener('input', function (e) {
    e.target.setCustomValidity('');
  });

  function autosize() {
    var el = this;
    setTimeout(function () {
      el.style.cssText = 'height:auto;';
      el.style.cssText = 'height:' + (el.scrollHeight + 5) + 'px';
    }, 0);
  }

  commentArea.addEventListener('keydown', autosize);

  // send form data with JavaScript
  if (window.FormData) {
    form.addEventListener('submit', function (event) {
      var formData = new FormData(form);

      var commentValue = commentArea.value;
      var nameValue = nameInput.value;

      var xhr = new XMLHttpRequest();
      // save the comment in the database
      xhr.open('POST', site.ajaxurl, true);
      xhr.onload = function () {};

      xhr.onerror = function (error) {
        messageElement.className = 'message error';
        messageElement.textContent = 'There was an error posting the comment. Please try again.';
      };
      xhr.onprogress = function (evt) {
        messageElement.textContent = 'Uploading: ' + evt.loaded / evt.total * 100;
      };
      xhr.onloadend = function (evt) {
        messageElement.className = 'message success';
        messageElement.textContent = 'Your comment was posted sucessfully.';
      };

      xhr.send(formData);

      // always call preventDefault at the end, see: http://molily.de/javascript-failure/
      event.preventDefault();
    });
  };
})();

objectFit.polyfill({
  selector: '.hero__image', // this can be any CSS selector
  fittype: 'cover' // either contain, cover, fill or none
});

(function () {
  var button = document.querySelector('.menu__trigger');
  var menu = document.querySelector('.menu__list');
  var body = document.querySelector('body');

  button.addEventListener('click', function () {
    var expanded = undefined.getAttribute('aria-expanded') === 'true';
    undefined.setAttribute('aria-expanded', String(!expanded));
    menu.classList.toggle('is-active', !expanded);
    body.classList.toggle('is-active', !expanded);
  });
})();

alert('aa');
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhY3QuanMiLCJmdW5jdGlvbnMuanMiLCJtZW51LmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZvcm0iLCJjb21tZW50QXJlYSIsIm5hbWVJbnB1dCIsIm1lc3NhZ2VFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJzZXRDdXN0b21WYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJhdXRvc2l6ZSIsImVsIiwic2V0VGltZW91dCIsInN0eWxlIiwiY3NzVGV4dCIsInNjcm9sbEhlaWdodCIsIndpbmRvdyIsIkZvcm1EYXRhIiwiZXZlbnQiLCJmb3JtRGF0YSIsImNvbW1lbnRWYWx1ZSIsInZhbHVlIiwibmFtZVZhbHVlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2l0ZSIsImFqYXh1cmwiLCJvbmxvYWQiLCJvbmVycm9yIiwiZXJyb3IiLCJjbGFzc05hbWUiLCJ0ZXh0Q29udGVudCIsIm9ucHJvZ3Jlc3MiLCJldnQiLCJsb2FkZWQiLCJ0b3RhbCIsIm9ubG9hZGVuZCIsInNlbmQiLCJwcmV2ZW50RGVmYXVsdCIsIm9iamVjdEZpdCIsInBvbHlmaWxsIiwic2VsZWN0b3IiLCJmaXR0eXBlIiwiYnV0dG9uIiwibWVudSIsImJvZHkiLCJleHBhbmRlZCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIlN0cmluZyIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImFsZXJ0Il0sIm1hcHBpbmdzIjoiOztBQUFBLENBQUEsWUFBQTs7QUFFQSxNQUFBLENBQUFBLFNBQUFDLGFBQUEsQ0FBQSxrQkFBQSxDQUFBLEVBQUE7O0FBRUEsTUFBQUMsT0FBQUYsU0FBQUMsYUFBQSxDQUFBLGtCQUFBLENBQUE7QUFDQSxNQUFBRSxjQUFBRCxLQUFBRCxhQUFBLENBQUEsYUFBQSxDQUFBO0FBQ0EsTUFBQUcsWUFBQUYsS0FBQUQsYUFBQSxDQUFBLFVBQUEsQ0FBQTtBQUNBLE1BQUFJLGlCQUFB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QUEsSUFBQSIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCgpID0+IHtcblxuICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb250YWN0LWZvcm0nKSkgcmV0dXJuO1xuXG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtY29udGFjdC1mb3JtJyk7XG4gIGNvbnN0IGNvbW1lbnRBcmVhID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuanMtbWVzc2FnZScpO1xuICBjb25zdCBuYW1lSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5qcy1uYW1lJyk7XG4gIGNvbnN0IG1lc3NhZ2VFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZlZWRiYWNrJyk7XG5cbiAgY29tbWVudEFyZWEuYWRkRXZlbnRMaXN0ZW5lcignaW52YWxpZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS50YXJnZXQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuICAgIGlmICghZS50YXJnZXQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KCdWdWwgZWVuIGJlcmljaHQgaW4uJyk7XG4gICAgfVxuICB9KTtcblxuICBjb21tZW50QXJlYS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS50YXJnZXQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuICB9KTtcblxuICBmdW5jdGlvbiBhdXRvc2l6ZSgpe1xuICAgIHZhciBlbCA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgZWwuc3R5bGUuY3NzVGV4dCA9ICdoZWlnaHQ6YXV0bzsnO1xuICAgICAgZWwuc3R5bGUuY3NzVGV4dCA9ICdoZWlnaHQ6JyArIChlbC5zY3JvbGxIZWlnaHQgICsgNSApICsgJ3B4JztcbiAgICB9LDApO1xuICB9XG5cbiAgY29tbWVudEFyZWEuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGF1dG9zaXplKTtcblxuICAvLyBzZW5kIGZvcm0gZGF0YSB3aXRoIEphdmFTY3JpcHRcbiAgaWYgKHdpbmRvdy5Gb3JtRGF0YSkge1xuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50KSA9PiB7XG4gICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XG5cbiAgICAgIGNvbnN0IGNvbW1lbnRWYWx1ZSA9IGNvbW1lbnRBcmVhLnZhbHVlO1xuICAgICAgY29uc3QgbmFtZVZhbHVlID0gbmFtZUlucHV0LnZhbHVlO1xuXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAvLyBzYXZlIHRoZSBjb21tZW50IGluIHRoZSBkYXRhYmFzZVxuICAgICAgeGhyLm9wZW4oJ1BPU1QnLCBzaXRlLmFqYXh1cmwsIHRydWUpO1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgbWVzc2FnZUVsZW1lbnQuY2xhc3NOYW1lID0gJ21lc3NhZ2UgZXJyb3InO1xuICAgICAgICBtZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9ICdUaGVyZSB3YXMgYW4gZXJyb3IgcG9zdGluZyB0aGUgY29tbWVudC4gUGxlYXNlIHRyeSBhZ2Fpbi4nO1xuICAgICAgfTtcbiAgICAgIHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBtZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9ICdVcGxvYWRpbmc6ICcgKyBldnQubG9hZGVkIC8gZXZ0LnRvdGFsICogMTAwO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIG1lc3NhZ2VFbGVtZW50LmNsYXNzTmFtZSA9ICdtZXNzYWdlIHN1Y2Nlc3MnO1xuICAgICAgICBtZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9ICdZb3VyIGNvbW1lbnQgd2FzIHBvc3RlZCBzdWNlc3NmdWxseS4nO1xuICAgICAgfTtcblxuICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuXG4gICAgICAvLyBhbHdheXMgY2FsbCBwcmV2ZW50RGVmYXVsdCBhdCB0aGUgZW5kLCBzZWU6IGh0dHA6Ly9tb2xpbHkuZGUvamF2YXNjcmlwdC1mYWlsdXJlL1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcbiAgfTtcbn0pKCk7XG4iLCJvYmplY3RGaXQucG9seWZpbGwoe1xuICBzZWxlY3RvcjogJy5oZXJvX19pbWFnZScsIC8vIHRoaXMgY2FuIGJlIGFueSBDU1Mgc2VsZWN0b3JcbiAgZml0dHlwZTogJ2NvdmVyJywgLy8gZWl0aGVyIGNvbnRhaW4sIGNvdmVyLCBmaWxsIG9yIG5vbmVcbn0pO1xuIiwiKCgpID0+IHtcbiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX3RyaWdnZXInKTtcbiAgY29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51X19saXN0Jyk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IGV4cGFuZGVkID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ3RydWUnO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgU3RyaW5nKCFleHBhbmRlZCkpO1xuICAgIG1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtYWN0aXZlJywgIWV4cGFuZGVkKTtcbiAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2lzLWFjdGl2ZScsICFleHBhbmRlZCk7XG4gIH0pO1xufSkoKTtcblxuYWxlcnQoJ2FhJyk7Il19
